/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package botondirectorio;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.io.File;
import java.io.IOException;
import java.security.acl.Owner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.plaf.RootPaneUI;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
 *
 * @author Bermu
 */
public class PanelCuadrado extends JDialog {

    String directorio;

    /**
     * Creates new form NewJDialog
     */
    public PanelCuadrado(JDialog padre, String dir) {
        //setea las propiedades de la ventana
        this.setTitle("Carpeta personal");
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.setResizable(true);
        this.setSize(400, 400);
        this.setMinimumSize(new Dimension(550, 350));
        this.setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
        this.setLocationRelativeTo(null);
        this.setAlwaysOnTop(true);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                padre.setVisible(true);
                dispose();
            }
        });
        directorio = dir;

        JPanel pnlFiles = new JPanel(new GridLayout());
        add(pnlFiles);
        listarFiles(pnlFiles);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void listarFiles(JPanel pnlFiles) {
        File f = new File(directorio);
        File[] file = f.listFiles();
        JButton jb;
        for (File file1 : file) {
            jb = new JButton(file1.getName());
            jb.setBounds(150, 150, 150, 150);
            jb.addActionListener(new ListenerFile(this, file1));
            pnlFiles.add(jb);
        }
    }

    /**
     * abre un file pasado por parametro
     * @param file 
     */
    public void abrirElemento(File file) {
        try {
            Desktop.getDesktop().open(file);
        } catch (IOException ex) {
            Logger.getLogger(PanelCuadrado.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
   

    /**
     * lista los archivos del directorio en la consola
     * @param dir 
     */
    public void listarElementos(String dir) {
        File f = new File(dir);
        File[] ficheros = null;
        if (f.exists()) { // Directorio existe
            ficheros = f.listFiles();
            for (File fichero : ficheros) {
                System.out.println(fichero);
            }
        } else { //Directorio no existe 
            System.out.println("directorio " + dir + " no existe.");
        }
    }
    
    /**
     * Listener para los botones de los archivos listados.
     */
     private class ListenerFile implements ActionListener {

        PanelCuadrado pnlCuad;
        File file;

        public ListenerFile(PanelCuadrado pnl, File f) {
            pnlCuad = pnl;
            file = f;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            pnlCuad.abrirElemento(file);
        }
    }
}
